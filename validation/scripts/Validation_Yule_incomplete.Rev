################################################################################
#
# RevBayes Validation Test: Constant-rate pure-birth (Yule) process
#
# Model: A constant-rate pure-birth process with uniform taxon sampling.
#
#
# authors: Sebastian Hoehna
#
################################################################################

## Global settings

NUM_VALIDATION_REPLICATES = 1000
NUM_MCMC_ITERATIONS       = 10000


# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()


#######################
# Reading in the Data #
#######################

tree <- readTrees( "data/primates.tree" )[1]

# Get some useful variables from the data. We need these later on.
taxa <- tree.taxa()



##############
# Tree model #
##############

# Specify a prior on the diversification and turnover rate
diversification ~ dnExp(1)
turnover <- 0

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := diversification + turnover
extinction := turnover

# specify a prior on the root age (our informed guess is about 75-80 mya)
root <- tree.rootAge()

sampling_fraction <- 23 / 450 # 23 out of the ~ 450 primate species

# create some moves that change the stochastic variables
# all moves are sliding proposals but you could use scaling proposals for the rates too
moves.append( mvScale(diversification,lambda=1,tune=true,weight=1) )

# construct a variable for the tree drawn from a birth death process
psi ~ dnBDP(lambda=speciation, mu=extinction, rootAge=abs(root), rho=sampling_fraction, taxa=taxa, condition="nTaxa" )
psi.clamp( tree )




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model( root )




mymcmc = mcmc(mymodel, monitors, moves)


validation = validationAnalysis( mymcmc, NUM_VALIDATION_REPLICATES, directory="output_Yule_incomplete" )
validation.burnin(generations=0.1*NUM_MCMC_ITERATIONS,tuningInterval=100)
validation.run(generations=NUM_MCMC_ITERATIONS)
validation.summarize()


# you may want to quit RevBayes now
q()
